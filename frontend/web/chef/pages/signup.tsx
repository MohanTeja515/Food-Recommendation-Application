import { useState } from 'react'
import Head from 'next/head';
import { useRouter } from 'next/router'
import Link from 'next/link';

import { useAppSelector } from '../redux/app/hooks';

import { useForm, SubmitHandler } from "react-hook-form";
import { ErrorMessage } from '@hookform/error-message';

import { toast } from 'react-toastify';

import * as React from 'react';
import Dialog, { DialogProps } from '@mui/material/Dialog';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';

type Props = {}

type Inputs = {
  first_name: string
  last_name: string
  email: string
  password: string
  re_password: string
}

const signup = (props: Props) => {
  const router = useRouter()
  const access = useAppSelector(state => state.user.access)
  if (access) {
    router.push('/')
  }

  const [reveal, setreveal] = useState(false)
  const [reveal1, setreveal1] = useState(false)

  const { register, handleSubmit, watch, reset, formState: { errors } } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = data => {
    const body = JSON.stringify(data);

    const trySignup = async () => {
      try {
        const res = await fetch(`http://127.0.0.1:8000/auth/users/`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: body
        });

        if (res.status === 201) {
          toast.success('Signed up Successfully, please check your email to activate your account', {
            position: toast.POSITION.TOP_CENTER
          });
          reset()
        } else {
          toast.error('Something went wrong or email already exists', {
            position: toast.POSITION.TOP_CENTER
          });
        }
      } catch (err) {
        toast.error('Something went wrong, Please try again', {
          position: toast.POSITION.TOP_CENTER
        });
      }
    }

    trySignup()
  }

  const [open, setOpen] = React.useState(false);
  const [scroll, setScroll] = React.useState<DialogProps['scroll']>('paper');

  const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {
    setOpen(true);
    setScroll(scrollType);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const descriptionElementRef = React.useRef<HTMLElement>(null);
  React.useEffect(() => {
    if (open) {
      const { current: descriptionElement } = descriptionElementRef;
      if (descriptionElement !== null) {
        descriptionElement.focus();
      }
    }
  }, [open]);

  

  return (
    <section className='grid h-screen place-items-center'>
      <Head>
        <title>Foodies | Signup</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <form className='flex flex-col space-y-3 justify-center color-text-black' onSubmit={handleSubmit(onSubmit)}>
        <h2 className='uppercase flex justify-center text-lg font-extrabold text-[#061d32]'>Sign Up</h2>
        <input
          type="text"
          className="text-[#061d32] border border-black form-input px-4 py-3 rounded-full w-80 peer invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500"
          placeholder='First Name...'
          {...register("first_name", { required: 'Please enter your First Name.' })}
        />
        <ErrorMessage
          errors={errors}
          name="first_name"
          render={({ message }) => <p className="text-red-600 text-sm ml-4">{message}</p>}
        />
        <input
          type="text"
          className="text-[#061d32] border border-black form-input px-4 py-3 rounded-full w-80 peer invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500"
          placeholder='Last Name...'
          {...register("last_name", { required: 'Please Enter your last name.' })}
        />
        <ErrorMessage
          errors={errors}
          name="last_name"
          render={({ message }) => <p className="text-red-600 text-sm ml-4">{message}</p>}
        />
        <input
          type="email"
          className="text-[#061d32] border border-black form-input px-4 py-3 rounded-full w-80 peer invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500"
          placeholder='Email...'
          {...register("email", { required: 'Email is required.' })}
        />
        <ErrorMessage
          errors={errors}
          name="email"
          render={({ message }) => <p className="text-red-600 text-sm ml-4">{message}</p>}
        />
        <>
          {
            (reveal) ? (
              <div className='flex justify-end'>
                <input
                  type="text"
                  className="form-input border border-black px-4 py-3 rounded-full w-80 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 text-black"
                  placeholder='Password...'
                  {...register("password", {
                    required: 'Password is required.',
                    minLength: {
                      value: 8,
                      message: "Password must have at least 8 characters"
                    }
                  })}
                />
                <div
                  onClick={() => setreveal(false)}
                  className='text-black absolute mt-3 mr-4 cursor-pointer'>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                    <title className='text-black'>Hide Password</title>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88" />
                  </svg>


                </div>
              </div>
            ) : (
              <div className='flex justify-end'>
                <input
                  type="password"
                  className="form-input px-4 py-3 rounded-full w-80 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 text-black border border-black"
                  placeholder='Password...'
                  {...register("password", {
                    required: 'Password is required.',
                    minLength: {
                      value: 8,
                      message: "Password must have at least 8 characters"
                    }
                  })}
                />
                <div
                  onClick={() => setreveal(true)}
                  className='text-black absolute mt-3 mr-4 cursor-pointer'>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                    <title className='text-black'>Show Password</title>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />
                    <path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>

                </div>
              </div>
            )
          }
        </>

        <ErrorMessage
          errors={errors}
          name="password"
          render={({ message }) => <p className="text-red-600 text-sm ml-4">{message}</p>}
        />

        <>
          {
            (reveal1) ? (
              <div className='flex justify-end'>
                <input
                  type="text"
                  className="form-input border border-black px-4 py-3 rounded-full w-80 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 text-black"
                  placeholder='Confirm Password...'
                  {...register("re_password", {
                    required: 'Please Confirm Password.',

                    validate: (val: string) => {
                      if (watch('password') != val) {
                        return "Your passwords do no match";
                      }
                    }
                  })}
                />
                <div
                  onClick={() => setreveal1(false)}
                  className='text-black absolute mt-3 mr-4 cursor-pointer'>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                    <title className='text-black'>Hide Password</title>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88" />
                  </svg>


                </div>
              </div>
            ) : (
              <div className='flex justify-end'>
                <input
                  type="password"
                  className="form-input px-4 py-3 rounded-full w-80 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 text-black border border-black"
                  placeholder='Confirm Password...'
                  {...register("re_password", {
                    required: 'Confirm Password is required.',
                    validate: (val: string) => {
                      if (watch('password') != val) {
                        return "Your passwords do no match";
                      }
                    }
                  })}
                />
                <div
                  onClick={() => setreveal1(true)}
                  className='text-black absolute mt-3 mr-4 cursor-pointer'>
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                    <title className='text-black'>Show Password</title>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />
                    <path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>

                </div>
              </div>
            )
          }
        </>

        <ErrorMessage
          errors={errors}
          name="re_password"
          render={({ message }) => <p className="text-red-600 text-sm ml-4">{message}</p>}
        />



        <div className='w-full flex flex-col items-center'>
          <div className='text-sm'>By clicking Sign up you are agreeing to our </div>
          <div onClick={handleClickOpen('paper')}><div className='ml-2 text-green-700 cursor-pointer hover:underline text-lg'>Terms and conditions</div></div>
          <Dialog
            open={open}
            onClose={handleClose}
            scroll={scroll}
            aria-labelledby="scroll-dialog-title"
            aria-describedby="scroll-dialog-description"
          >
            <DialogTitle id="scroll-dialog-title">Terms and Conditions</DialogTitle>
            <DialogContent dividers={scroll === 'paper'}>
              <DialogContentText
                id="scroll-dialog-description"
                ref={descriptionElementRef}
                tabIndex={-1}
              >
                {[...new Array(50)]
                  .map(
                    () => `Cras mattis consectetur purus sit amet fermentum.
Cras justo odio, dapibus ac facilisis in, egestas eget quam.
Morbi leo risus, porta ac consectetur ac, vestibulum at eros.
Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`,
                  )
                  .join('\n')}
              </DialogContentText>
            </DialogContent>
          </Dialog>
        </div>


        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 rounded-full uppercase text-lg cursor-pointer active:bg-blue-700 focus:outline-none focus:ring focus:ring-blue-300 w-80"
        >
          Sign Up
        </button>

        <div className='flex'>
          <p className='text-gray-700'>Already Have an Account?</p>
          <div className='text-green-900 hover:underline ml-1 font-semibold'>
            <Link href='/login'>Login</Link>
          </div>
        </div>
      </form>
    </section>
  )
}

export default signup